
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning message:
Setting LC_CTYPE failed, using "C" 
> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages(library(iCOBRA))
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(tidyr))
> suppressPackageStartupMessages(library(caTools))
> 
> print(dataset)
[1] "GSE48968-GPL13112"
> print(filt)
[1] "TPM_1_25p"
> 
> if (filt == "") {
+   exts <- filt
+ } else {
+   exts <- paste0("_", filt)
+ }
> 
> calculate_concordance <- function(mtx, maxrank, frac) {
+   if (ncol(mtx) > 1) {
+     data.frame(t(sapply(1:maxrank, function(i) {
+       p <- sum(table(unlist(mtx[1:i, ])) >= frac * ncol(mtx))
+       c(k = i, p = p, frac = frac)
+     })), stringsAsFactors = FALSE)
+   } else {
+     NULL
+   }
+ }
> 
> get_method <- function(x) sapply(strsplit(x, "\\."), .subset, 1)
> get_nsamples <- function(x) sapply(strsplit(x, "\\."), .subset, 2)
> get_repl <- function(x) sapply(strsplit(x, "\\."), .subset, 3)
> 
> cobratmp <- readRDS(paste0("figures/cobra_data/", dataset, exts, "_cobra.rds"))
> pval(cobratmp)[is.na(pval(cobratmp))] <- 1
> padj(cobratmp)[is.na(padj(cobratmp))] <- 1
> 
> summary_data <- list()
> 
> ## -------------------------- Concordance plots --------------------------- ##
> maxrank <- 1000
> minfrac <- 1
> 
> pconc <- pval(cobratmp)
> for (i in colnames(pconc)) {
+   pconc[, i] <- order(pconc[, i])
+ }
> 
> ## All sample sizes, all replicates
> allm <- unique(get_method(colnames(pconc)))
> concvals <- do.call(rbind, lapply(allm, function(mth) {
+   concval <- calculate_concordance(mtx = pconc[, which(get_method(colnames(pconc)) == mth)], 
+                                    maxrank = maxrank, frac = minfrac)
+   concval$method <- mth
+   concval
+ }))
> summary_data$concordance_fullds <- rbind(summary_data$concordance_fullds, concvals)
> 
> conc_auc <- concvals %>% dplyr::group_by(method) %>% 
+   dplyr::summarize(auc = caTools::trapz(c(k, k[length(k)]), c(p, 0))/(maxrank^2/2)) %>%
+   dplyr::mutate(frac = minfrac)
> summary_data$concordance_fullds_auc <- rbind(summary_data$concordance_fullds_auc, conc_auc)
> 
> ## Per sample size
> allss <- unique(get_nsamples(colnames(pconc)))
> concvals_ss <- do.call(rbind, lapply(allm, function(mth) {
+   do.call(rbind, lapply(allss, function(i) {
+     concval <- 
+       calculate_concordance(mtx = pconc[, intersect(which(get_method(colnames(pconc)) == mth),
+                                                     which(get_nsamples(colnames(pconc)) == i)), 
+                                         drop = FALSE],
+                             maxrank = maxrank, frac = minfrac)
+     if (!is.null(concval)) {
+       concval$method <- mth
+       concval$ncells <- i
+       concval
+     } else {
+       NULL
+     }
+   }))
+ }))
> concvals_ss$ncells <- factor(concvals_ss$ncells,
+                              levels = sort(unique(as.numeric(as.character(concvals_ss$ncells)))))
> summary_data$concordance_byncells <- rbind(summary_data$concordance_byncells, concvals_ss)
> 
> conc_auc_ss <- concvals_ss %>% dplyr::group_by(method, ncells) %>% 
+   dplyr::summarize(auc = caTools::trapz(c(k, k[length(k)]), c(p, 0))/(maxrank^2/2)) %>%
+   dplyr::mutate(frac = minfrac)
> summary_data$concordance_byncells_auc <- 
+   rbind(summary_data$concordance_byncells_auc, conc_auc_ss)
> 
> ## Pairwise, within sample size
> concvals_pairwise <- do.call(rbind, lapply(allm, function(mth) {
+   do.call(rbind, lapply(allss, function(i) {
+     tmp <- pconc[, intersect(which(get_method(colnames(pconc)) == mth),
+                              which(get_nsamples(colnames(pconc)) == i)), drop = FALSE]
+     if (ncol(tmp) > 1) {
+       concval <- NULL
+       for (j1 in 1:(ncol(tmp) - 1)) {
+         for (j2 in (j1 + 1):(ncol(tmp))) {
+           cv <- calculate_concordance(mtx = tmp[, c(j1, j2)], maxrank = maxrank, frac = minfrac)
+           cv$ncells1 <- i
+           cv$ncells2 <- i
+           cv$replicate1 <- get_repl(colnames(tmp))[j1]
+           cv$replicate2 <- get_repl(colnames(tmp))[j2]
+           concval <- rbind(concval, cv)
+         }
+       }
+       concval$method <- mth
+       concval
+     } else {
+       NULL
+     }
+   }))
+ }))
> summary_data$concordance_pairwise <- rbind(summary_data$concordance_pairwise, concvals_pairwise)
> 
> conc_auc_pw <- concvals_pairwise %>% 
+   dplyr::group_by(method, ncells1, ncells2, replicate1, replicate2) %>% 
+   dplyr::summarize(auc = caTools::trapz(c(k, k[length(k)]), c(p, 0))/(maxrank^2/2)) %>%
+   dplyr::mutate(frac = minfrac)
> summary_data$concordance_pairwise_auc <- 
+   rbind(summary_data$concordance_pairwise_auc, conc_auc_pw)
> 
> ## Between pairs of methods, within sample size/replicate
> allrepl <- unique(get_repl(colnames(pconc)))
> concvals_btwmth <- do.call(rbind, lapply(allss, function(ss) {
+   do.call(rbind, lapply(allrepl, function(i) {
+     tmp <- pconc[, intersect(which(get_repl(colnames(pconc)) == i),
+                              which(get_nsamples(colnames(pconc)) == ss)), drop = FALSE]
+     if (ncol(tmp) > 1) {
+       concval <- NULL
+       for (j1 in 1:(ncol(tmp) - 1)) {
+         for (j2 in (j1 + 1):(ncol(tmp))) {
+           cv <- calculate_concordance(mtx = tmp[, c(j1, j2)], maxrank = maxrank, frac = minfrac)
+           cv$method1 <- get_method(colnames(tmp))[j1]
+           cv$method2 <- get_method(colnames(tmp))[j2]
+           concval <- rbind(concval, cv)
+         }
+       }
+       concval$ncells <- ss
+       concval$repl <- i
+       concval
+     } else {
+       NULL
+     }
+   }))
+ }))
> summary_data$concordance_betweenmethods <- 
+   rbind(summary_data$concordance_betweenmethods, concvals_btwmth)
> 
> conc_auc_btwmth <- concvals_btwmth %>% 
+   dplyr::group_by(method1, method2, ncells, repl) %>% 
+   dplyr::summarize(auc = caTools::trapz(c(k, k[length(k)]), c(p, 0))/(maxrank^2/2)) %>%
+   dplyr::mutate(frac = minfrac)
> summary_data$concordance_betweenmethods_auc <- 
+   rbind(summary_data$concordance_betweenmethods_auc, conc_auc_btwmth)
> 
> saveRDS(summary_data, file = paste0("figures/consistency/", dataset, exts, "_concordances.rds"))
> 
> sessionInfo()
R version 3.3.1 (2016-06-21)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

locale:
 [1] LC_CTYPE=C                 LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] caTools_1.17.1 tidyr_0.6.1    dplyr_0.5.0    iCOBRA_1.2.0  

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.9          magrittr_1.5         munsell_0.4.3       
 [4] colorspace_1.3-2     xtable_1.8-2         R6_2.2.0            
 [7] stringr_1.1.0        ROCR_1.0-7           plyr_1.8.4          
[10] tools_3.3.1          shinydashboard_0.5.3 DT_0.2              
[13] grid_3.3.1           gtable_0.2.0         KernSmooth_2.23-15  
[16] DBI_0.5-1            gtools_3.5.0         htmltools_0.3.5     
[19] lazyeval_0.2.0       assertthat_0.1       digest_0.6.12       
[22] tibble_1.2           gridExtra_2.2.1      shiny_1.0.0         
[25] reshape2_1.4.2       ggplot2_2.2.1        bitops_1.0-6        
[28] htmlwidgets_0.8      mime_0.5             stringi_1.1.2       
[31] gdata_2.17.0         limma_3.30.8         UpSetR_1.3.2        
[34] shinyBS_0.61         gplots_3.0.1         scales_0.4.1        
[37] httpuv_1.3.3        
> 
> proc.time()
     user    system   elapsed 
11355.423    22.251 11406.012 
