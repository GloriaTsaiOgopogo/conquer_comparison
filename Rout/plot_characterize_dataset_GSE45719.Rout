
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning message:
Setting LC_CTYPE failed, using "C" 
> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages(library(pheatmap))
> suppressPackageStartupMessages(library(ggplot2))
Warning message:
package 'ggplot2' was built under R version 3.3.2 
> suppressPackageStartupMessages(library(ggrepel))
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(tidyr))
> suppressPackageStartupMessages(library(forcats))
> suppressPackageStartupMessages(library(iCOBRA))
> suppressPackageStartupMessages(library(reshape2))
> suppressPackageStartupMessages(library(rjson))
> suppressPackageStartupMessages(library(Biobase))
> suppressPackageStartupMessages(library(SummarizedExperiment))
> suppressPackageStartupMessages(library(MultiAssayExperiment))
> suppressPackageStartupMessages(library(UpSetR))
> suppressPackageStartupMessages(library(lazyeval))
> suppressPackageStartupMessages(library(monocle))
> source("/home/Shared/data/seq/conquer/comparison/scripts/prepare_mae.R")
> 
> if (filt == "") { 
+   exts <- filt
+ } else {
+   exts <- paste0("_", filt)
+ }
> 
> pdf(paste0("figures/dataset_characteristics/", dataset, exts, ".pdf"), width = 14, height = 9)
> 
> print(dataset)
[1] "GSE45719"
> print(config_file)
[1] "config/GSE45719.json"
> print(filt)
[1] ""
> 
> config <- fromJSON(file = config_file)
> mae <- readRDS(config$mae)
> groupid <- config$groupid
> mae <- clean_mae(mae = mae, groupid = groupid)
> 
> subsets <- readRDS(config$subfile)
> keep_samples <- subsets$keep_samples
> imposed_condition <- subsets$out_condition
> 
> sizes <- names(keep_samples)
> char_gene <- list()
> char_cells <- list()
> char_ds <- list()
> for (sz in sizes) {
+   for (i in 1:nrow(keep_samples[[as.character(sz)]])) {
+     message(sz, ".", i)
+     L <- subset_mae(mae, keep_samples, sz, i, imposed_condition, filt = filt)
+     
+     cds <- newCellDataSet(L$tpm, 
+                           phenoData = new("AnnotatedDataFrame", 
+                                           data = data.frame(condition = L$condt, 
+                                                             row.names = colnames(L$tpm))))
+     censuscounts <- relative2abs(cds)
+     
+     ## Census count distributions
+     print(reshape2::melt(censuscounts) %>% dplyr::mutate(condition = L$condt[Var2]) %>%
+             ggplot(aes(x = value, group = Var2, color = condition)) + 
+             geom_density() + scale_x_log10() + theme_bw() + 
+             xlab("Census count") + ggtitle(paste0("Census count distribution per cell, ", 
+                                                   sz, " cells per group, repl ", i)))
+     
+     ## Count distributions
+     print(reshape2::melt(L$count) %>% dplyr::mutate(condition = L$condt[Var2]) %>% 
+             ggplot(aes(x = value, group = Var2, color = condition)) + 
+             geom_density() + scale_x_log10() + theme_bw() + 
+             xlab("Count") + ggtitle(paste0("Count distribution per cell, ", 
+                                            sz, " cells per group, repl ", i)))
+     
+     ## Gene characteristics
+     avecount <- data.frame(avecount = apply(L$count, 1, mean), gene = rownames(L$count))
+     avecensuscount <- data.frame(avecensuscount = apply(censuscounts, 1, mean), 
+                                  gene = rownames(censuscounts))
+     avetpm <- data.frame(avetpm = apply(L$tpm, 1, mean), gene = rownames(L$tpm))
+     fraczero <- data.frame(fraczero = apply(L$count, 1, function(x) mean(x == 0)),
+                            fraczero1 = apply(L$count[, L$condt == levels(factor(L$condt))[1]], 
+                                              1, function(x) mean(x == 0)),
+                            fraczero2 = apply(L$count[, L$condt == levels(factor(L$condt))[2]], 
+                                              1, function(x) mean(x == 0)), gene = rownames(L$count))
+     fraczero$fraczerodiff <- abs(fraczero$fraczero1 - fraczero$fraczero2)
+     fraczerocensus <- data.frame(fraczerocensus = apply(censuscounts, 1, function(x) mean(x == 0)),
+                                  gene = rownames(censuscounts))
+     vartpm <- data.frame(vartpm = apply(L$tpm, 1, var), gene = rownames(L$tpm))
+     df2 <- Reduce(function(...) merge(..., by = "gene", all = TRUE), 
+                   list(vartpm, fraczero, avecount, avetpm, avecensuscount, fraczerocensus))
+     colnames(df2)[colnames(df2) != "gene"] <- paste0(colnames(df2)[colnames(df2) != "gene"],
+                                                      ".", sz, ".", i)
+     char_gene[[paste0(sz, ".", i)]] <- df2
+     
+     ## Cell characteristics
+     libsize <- data.frame(libsize = colSums(L$count), cell = colnames(L$count))
+     libsizecensus <- data.frame(libsizecensus = colSums(censuscounts), cell = colnames(censuscounts))
+     fraczerocell <- data.frame(fraczero = colMeans(L$count == 0), cell = colnames(L$count))
+     fraczerocellcensus <- data.frame(fraczerocensus = colMeans(censuscounts == 0), 
+                                      cell = colnames(censuscounts))
+     df3 <- Reduce(function(...) merge(..., by = "cell", all = TRUE),
+                   list(libsize, fraczerocell, libsizecensus, fraczerocellcensus))
+     colnames(df3)[colnames(df3) != "cell"] <- paste0(colnames(df3)[colnames(df3) != "cell"],
+                                                      ".", sz, ".", i)
+     char_cells[[paste0(sz, ".", i)]] <- df3
+     
+     char_ds[[paste0(sz, ".", i)]] <- c(n_genes = nrow(L$count))
+   }
+ }
50.1
24.1
24.2
24.3
24.4
24.5
12.1
12.2
12.3
12.4
12.5
6.1
6.2
6.3
6.4
6.5
There were 50 or more warnings (use warnings() to see the first 50)
> 
> char_ds_m <- data.frame(ds = names(char_ds), n_genes = sapply(char_ds, function(w) w$n_genes),
+                         stringsAsFactors = FALSE)
Error in w$n_genes : $ operator is invalid for atomic vectors
Calls: data.frame -> sapply -> sapply -> lapply -> FUN
Execution halted
