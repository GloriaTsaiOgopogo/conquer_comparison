
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning message:
Setting LC_CTYPE failed, using "C" 
> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(dataset)
[1] "GSE48968-GPL13112"
> print(config_file)
[1] "config/GSE48968-GPL13112.json"
> print(pDE)
[1] 0.1
> print(seed)
[1] 123
> 
> set.seed(seed)
> 
> suppressPackageStartupMessages(library(SummarizedExperiment))
> suppressPackageStartupMessages(library(MultiAssayExperiment))
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(tidyr))
> suppressPackageStartupMessages(library(edgeR))
> suppressPackageStartupMessages(library(rjson))
> suppressPackageStartupMessages(library(powsim))

 For updates of the NBGOF package, please visit https://github.com/gu-mi/NBGOF 

Warning messages:
1: package 'ggplot2' was built under R version 3.3.2 
2: In rgl.init(initValue, onlyNULL) : RGL: unable to open X11 display
3: 'rgl_init' failed, running with rgl.useNULL = TRUE 
> 
> source("/home/Shared/data/seq/conquer/comparison/scripts/powsim_modified_functions.R")
> 
> config <- fromJSON(file = config_file)
> 
> print(config)
$mae
[1] "data/GSE48968-GPL13112.rds"

$subfile
[1] "subsets/GSE48968-GPL13112_subsets.rds"

$resfilebase
[1] "results/GSE48968-GPL13112"

$figfilebase
[1] "figures/diffexpression/GSE48968-GPL13112"

$groupid
[1] "source_name_ch1"

$keepgroups
[1] "BMDC (1h LPS Stimulation)" "BMDC (4h LPS Stimulation)"

$seed
[1] 42

$sizes
[1] 95 48 24 12

$nreps
[1] 1 5 5 5

> 
> mae <- readRDS(config$mae)
> pdata <- Biobase::pData(mae)
> 
> groupid <- config$groupid
> keepgroups <- config$keepgroups
> if (length(groupid) > 1) {
+   pdata[, paste(groupid, collapse = ".")] <- 
+     as.character(interaction(as.data.frame(pdata[, groupid])))
+   groupid <- paste(groupid, collapse = ".")
+ }
> 
> counts <- assays(experiments(mae)[["gene"]])[["count_lstpm"]]
> stopifnot(all(colnames(counts) == rownames(pdata)))
> 
> keep <- which(pdata[, groupid] %in% keepgroups)
> length(keep)
[1] 191
> counts <- round(counts[, keep])
> counts <- counts[rowSums(counts > 0) > 1, ]
> group <- as.character(pdata[keep, groupid])
> 
> param <- estimateNBParamMod(countData = counts, 
+                             cData = data.frame(group = group, sample = colnames(counts), 
+                                                row.names = colnames(counts),
+                                                stringsAsFactors = FALSE), 
+                             design = ~group, RNAseq = "singlecell", 
+                             estFramework = "edgeR", sigma = 1.96)
> 
> ## Check that we keep all genes for the simulation (otherwise the ID matching
> ## below won't be correct)
> length(param$means)
[1] 25072
> nrow(counts)
[1] 25072
> 
> ## Function to generate log-fold changes
> lfc <- function(x) sample(c(-1, 1), size = x, replace = TRUE) * rgamma(x, 4, 2)
> 
> desetup <- DESetup(ngenes = nrow(counts), nsims = 1, p.DE = pDE, LFC = lfc, sim.seed = seed)
> simsetup <- SimSetup(desetup = desetup, params = param, size.factors = "given")
> simsetup$ncores <- 5
> simsetup$DEid <- simsetup$DEid[[1]]
> simsetup$lfc <- simsetup$lfc[[1]]
> simsetup$sim.seed <- simsetup$sim.seed[[1]]
> 
> ## Simulate
> sims <- powsim:::.simRNAseq(simOptions = simsetup, 
+                             n1 = sum(group == levels(factor(group))[1]), 
+                             n2 = sum(group == levels(factor(group))[2]))
[1] 850179
> 
> ## Figure out to which gene each simulated gene corresponds (replicate some of
> ## the sampling code used in the simulation function)
> set.seed(simsetup$sim.seed)
> index <- sample(1:length(simsetup$means), size = simsetup$ngenes, replace = TRUE)
> cor(apply(counts[index, ], 1, mean), apply(sims$counts, 1, mean), method = "spearman")
[1] 0.9244982
> cor(simsetup$means[index], apply(sims$counts, 1, mean), method = "spearman")
[1] 0.9884375
> idconv <- data.frame(id = rownames(sims$counts), gene = rownames(counts)[index], 
+                      stringsAsFactors = FALSE)
> 
> ## Generate truth
> truth <- data.frame(id = rownames(sims$counts),
+                     lfc = sims$simOptions$lfc, stringsAsFactors = FALSE) %>%
+   dplyr::mutate(status = as.numeric(lfc != 0))
> rownames(truth) <- truth$id
> 
> ## Calculate TPMs from the simulated counts
> avetxlength <- assays(experiments(mae)[["gene"]])[["avetxlength"]]
> avetxlength <- avetxlength[match(idconv$gene[match(rownames(sims$counts), 
+                                                    idconv$id)], rownames(avetxlength)), ]
> newMat <- sims$counts/rowMeans(avetxlength)
> sim_TPM <- t(t(newMat) / colSums(newMat)) * 1e6
> 
> ## Generate MultiAssayExperiment
> generse <- SummarizedExperiment(assays = list(TPM = sim_TPM,
+                                               count_lstpm = sims$counts))
> 
> mae <- MultiAssayExperiment(experiments = list(gene = generse),
+                             pData = data.frame(group = as.character(levels(factor(group))[sims$designs/2 + 3/2]),
+                                                sample = colnames(sims$counts), 
+                                                row.names = colnames(sims$counts)))
> 
> saveRDS(mae, file = paste0("/home/Shared/data/seq/conquer/comparison/data/", 
+                            dataset, "sim", seed, ".rds"))
> saveRDS(truth, file = paste0("/home/Shared/data/seq/conquer/comparison/data/", 
+                              dataset, "sim", seed, "_truth.rds"))
> 
> proc.time()
   user  system elapsed 
309.282 119.693 435.382 
