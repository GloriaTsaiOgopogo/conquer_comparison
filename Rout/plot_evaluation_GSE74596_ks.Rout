
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning message:
Setting LC_CTYPE failed, using "C" 
> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(dataset)
[1] "GSE74596"
> print(filt)
[1] ""
> print(plottype)
[1] "ks"
> 
> source("/home/Shared/data/seq/conquer/comparison/scripts/plot_setup.R")
Warning message:
package 'ggplot2' was built under R version 3.3.2 
> source(paste0("/home/Shared/data/seq/conquer/comparison/scripts/plot_", plottype, ".R"))
> # 
> # # source("/home/Shared/data/seq/conquer/comparison/scripts/plot_results.R")
> # # source("/home/Shared/data/seq/conquer/comparison/scripts/plot_results_relativetruth.R")
> # # source("/home/Shared/data/seq/conquer/comparison/scripts/plot_results_relativetruth_all.R")
> # # source("/home/Shared/data/seq/conquer/comparison/scripts/plot_timing.R")
> # # source("/home/Shared/data/seq/conquer/comparison/scripts/plot_truefpr.R")
> # # source("/home/Shared/data/seq/conquer/comparison/scripts/plot_results_characterization.R")
> # 
> if (filt == "") {
+   exts <- filt
+ } else {
+   exts <- paste0("_", filt)
+ }
> names(cols) <- paste0(names(cols), exts)
> # 
> # ## Create iCOBRA object from the result files for the different methods
> # (resfiles <- paste0("/home/Shared/data/seq/conquer/comparison/results/",
> #                     dataset, "_", demethods, exts, ".rds"))
> # file.exists(resfiles)
> # cobra <- NULL
> # timings <- list()
> # for (rf in resfiles) {
> #   rf <- readRDS(rf)
> #   for (nm in names(rf)) {
> #     print(names(rf[[nm]]))
> #     timings[[nm]] <- rf[[nm]]$timing
> #     df <- rf[[nm]]$df
> #     if ("pval" %in% colnames(df)) {
> #       cobra <- COBRAData(pval = setNames(data.frame(mt = df$pval,
> #                                                     row.names = rownames(df)), nm),
> #                          object_to_extend = cobra)
> #     }
> #     if ("padj" %in% colnames(df)) {
> #       cobra <- COBRAData(padj = setNames(data.frame(mt = df$padj,
> #                                                     row.names = rownames(df)), nm),
> #                          object_to_extend = cobra)
> #     }
> #     if ("score" %in% colnames(df)) {
> #       cobra <- COBRAData(score = setNames(data.frame(mt = df$score,
> #                                                      row.names = rownames(df)), nm),
> #                          object_to_extend = cobra)
> #     }
> #   }
> # }
> # 
> # cobra <- calculate_adjp(cobra)
> # 
> # # pval(cobra)[is.na(pval(cobra))] <- 1
> # # padj(cobra)[is.na(padj(cobra))] <- 1
> # 
> # ## Add gene characteristics to the COBRA object
> # config <- fromJSON(file = config_file)
> # mae <- readRDS(config$mae)
> # groupid <- config$groupid
> # mae <- clean_mae(mae = mae, groupid = groupid)
> # 
> # subsets <- readRDS(config$subfile)
> # keep_samples <- subsets$keep_samples
> # imposed_condition <- subsets$out_condition
> # 
> # sizes <- names(keep_samples)
> # truth <- list()
> # tested <- list()
> # for (sz in sizes) {
> #   for (i in 1:nrow(keep_samples[[as.character(sz)]])) {
> #     message(sz, ".", i)
> #     L <- subset_mae(mae, keep_samples, sz, i, imposed_condition, filt = filt)
> #     avecount <- data.frame(avecount = apply(L$count, 1, mean), gene = rownames(L$count))
> #     avetpm <- data.frame(avetpm = apply(L$tpm, 1, mean), gene = rownames(L$tpm))
> #     fraczero <- data.frame(fraczero = apply(L$count, 1, function(x) mean(x == 0)),
> #                            fraczero1 = apply(L$count[, L$condt == levels(factor(L$condt))[1]], 
> #                                              1, function(x) mean(x == 0)),
> #                            fraczero2 = apply(L$count[, L$condt == levels(factor(L$condt))[2]], 
> #                                              1, function(x) mean(x == 0)), gene = rownames(L$count))
> #     fraczero$fraczerodiff <- abs(fraczero$fraczero1 - fraczero$fraczero2)
> #     vartpm <- data.frame(vartpm = apply(L$tpm, 1, var), gene = rownames(L$tpm))
> #     df2 <- Reduce(function(...) merge(..., by = "gene", all = TRUE), 
> #                   list(vartpm, fraczero, avecount, avetpm))
> #     colnames(df2)[colnames(df2) != "gene"] <- paste0(colnames(df2)[colnames(df2) != "gene"],
> #                                                      ".", sz, ".", i)
> #     truth[[paste0(sz, ".", i)]] <- df2
> #     
> #     df3 <- data.frame(gene = df2$gene, tested = TRUE)
> #     colnames(df3)[colnames(df3) != "gene"] <- paste0(colnames(df3)[colnames(df3) != "gene"],
> #                                                      ".", sz, ".", i)
> #     tested[[paste0(sz, ".", i)]] <- df3
> #   }
> # }
> # truth <- Reduce(function(...) merge(..., by = "gene", all = TRUE), truth)
> # tested <- Reduce(function(...) merge(..., by = "gene", all = TRUE), tested)
> # 
> # padjm <- reshape2::melt(as.matrix(padj(cobra)), value.name = "padj",
> #                         varnames = c("gene", "method")) %>%
> #   tidyr::separate(method, into = c("method", "ncells", "repl"), sep = "\\.")
> # truthm <- reshape2::melt(truth) %>% 
> #   tidyr::separate(variable, into = c("measurement", "ncells", "repl"), sep = "\\.")
> # testedm <- reshape2::melt(tested, id.vars = "gene") %>%
> #   tidyr::separate(variable, into = c("measurement", "ncells", "repl"), sep = "\\.") %>%
> #   dplyr::rename(tested = value) %>%
> #   dplyr::select(-measurement)
> # summary_data <- list(all_data = dplyr::inner_join(padjm, inner_join(truthm, testedm)) %>%
> #                        dplyr::mutate(dataset = dataset, filt = filt) %>%
> #                        mutate(value = ifelse(measurement %in% c("vartpm", "avecount"), 
> #                                              log2(value), value)) %>% 
> #                        mutate(measurement = ifelse(measurement %in% c("vartpm", "avecount"), 
> #                                                    paste0("log2_", measurement), measurement)) %>%
> #                        dplyr::mutate(tested = ifelse(tested == TRUE, TRUE, FALSE)))
> # 
> # ## Define "truth" for each method as the genes that are differentially 
> # ## expressed with the largest sample size
> # tmp <- padj(cobra)[, get_nsamples(colnames(padj(cobra))) == 
> #                      max(as.numeric(as.character(get_nsamples(colnames(padj(cobra))))))]
> # colnames(tmp) <- paste0(get_method(colnames(tmp)), ".truth")
> # tmp <- (tmp <= 0.05)
> # mode(tmp) <- "numeric"
> # tmp <- tmp[match(truth$gene, rownames(tmp)), ]
> # tmp[is.na(tmp)] <- 0
> # 
> # truth <- merge(truth, tmp, by.x = "gene", by.y = 0, all = TRUE)
> # rownames(truth) <- truth$gene
> # 
> # cobra <- COBRAData(truth = truth, object_to_extend = cobra)
> 
> cobra <- readRDS(paste0("figures/cobra_data/", dataset, exts, ".rds"))
> timings <- readRDS(paste0("figures/cobra_data/", dataset, exts, "_timings.rds"))
> 
> pdf(paste0("figures/", plottype, "/", dataset, exts, "_", plottype, ".pdf"), width = 14, height = 9)
> summary_data <- list()
> if (plottype != "timing") {
+   summary_data <- get(paste0("plot_", plottype))(cobra, colvec = cols, summary_data = summary_data)
+ } else {
+   summary_data <- get(paste0("plot_", plottype))(timings, colvec = cols, summary_data = summary_data)
+ }
There were 50 or more warnings (use warnings() to see the first 50)
> # summary_data <- plot_results_relativetruth(cobra, colvec = cols, summary_data = summary_data)
> # summary_data <- plot_results_relativetruth_all(cobra, colvec = cols, summary_data = summary_data)
> # summary_data <- plot_results_characterization(cobra, colvec = cols, summary_data = summary_data)
> # summary_data <- plot_results(cobra, colvec = cols, summary_data = summary_data)
> # summary_data <- plot_ks(cobra, colvec = cols, summary_data = summary_data)
> # summary_data <- plot_truefpr(cobra, colvec = cols, summary_data = summary_data)
> # summary_data <- plot_timing(timings, colvec = cols, summary_data = summary_data)
> dev.off()
null device 
          1 
> 
> summary_data <- lapply(summary_data, function(L) {
+   L$dataset <- dataset
+   L$filt <- filt
+   L
+ })
> # ## Save summary data
> # summary_data$stats_charac$dataset <- dataset
> # summary_data$stats_charac$filt <- filt
> # summary_data$fracpbelow0.05$dataset <- dataset
> # summary_data$fracpbelow0.05$filt <- filt
> # summary_data$timing$dataset <- dataset
> # summary_data$timing$filt <- filt
> 
> saveRDS(summary_data, file = paste0("figures/", plottype, "/", dataset, 
+                                     exts, "_", plottype, "_summary_data.rds"))
> 
> sessionInfo()
R version 3.3.1 (2016-06-21)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

locale:
 [1] LC_CTYPE=C                 LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
 [1] grid      stats4    parallel  stats     graphics  grDevices utils    
 [8] datasets  methods   base     

other attached packages:
 [1] RColorBrewer_1.1-2         ggbiplot_0.55             
 [3] scales_0.4.1               plyr_1.8.4                
 [5] lazyeval_0.2.0             UpSetR_1.3.2              
 [7] MultiAssayExperiment_1.0.0 SummarizedExperiment_1.4.0
 [9] GenomicRanges_1.26.2       GenomeInfoDb_1.10.3       
[11] IRanges_2.8.1              S4Vectors_0.12.1          
[13] Biobase_2.34.0             BiocGenerics_0.20.0       
[15] rjson_0.2.15               reshape2_1.4.2            
[17] iCOBRA_1.2.0               tidyr_0.6.1               
[19] dplyr_0.5.0                ggrepel_0.6.5             
[21] ggplot2_2.2.1              pheatmap_1.0.8            

loaded via a namespace (and not attached):
 [1] gtools_3.5.0         lattice_0.20-34      colorspace_1.3-2    
 [4] htmltools_0.3.5      DBI_0.5-1            stringr_1.1.0       
 [7] zlibbioc_1.20.0      munsell_0.4.3        gtable_0.2.0        
[10] caTools_1.17.1       htmlwidgets_0.8      labeling_0.3        
[13] httpuv_1.3.3         Rcpp_0.12.9          KernSmooth_2.23-15  
[16] xtable_1.8-2         ROCR_1.0-7           DT_0.2              
[19] gdata_2.17.0         limma_3.30.8         XVector_0.14.0      
[22] mime_0.5             gplots_3.0.1         gridExtra_2.2.1     
[25] digest_0.6.12        stringi_1.1.2        shiny_1.0.0         
[28] tools_3.3.1          bitops_1.0-6         magrittr_1.5        
[31] RCurl_1.95-4.8       tibble_1.2           Matrix_1.2-8        
[34] shinyBS_0.61         shinydashboard_0.5.3 assertthat_0.1      
[37] R6_2.2.0            
> 
> proc.time()
   user  system elapsed 
 28.706   2.666  31.837 
