
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning message:
Setting LC_CTYPE failed, using "C" 
> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages(library(pheatmap))
> suppressPackageStartupMessages(library(ggplot2))
Warning message:
package 'ggplot2' was built under R version 3.3.2 
> suppressPackageStartupMessages(library(ggrepel))
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(tidyr))
> suppressPackageStartupMessages(library(forcats))
> suppressPackageStartupMessages(library(iCOBRA))
> suppressPackageStartupMessages(library(reshape2))
> suppressPackageStartupMessages(library(rjson))
> suppressPackageStartupMessages(library(Biobase))
> suppressPackageStartupMessages(library(SummarizedExperiment))
> suppressPackageStartupMessages(library(MultiAssayExperiment))
> suppressPackageStartupMessages(library(UpSetR))
> suppressPackageStartupMessages(library(lazyeval))
> suppressPackageStartupMessages(library(monocle))
> source("/home/Shared/data/seq/conquer/comparison/scripts/prepare_mae.R")
> source("/home/Shared/data/seq/conquer/comparison/scripts/calculate_gene_characteristics.R")
> source("/home/Shared/data/seq/conquer/comparison/scripts/calculate_cell_characteristics.R")
> 
> if (filt == "") { 
+   exts <- filt
+ } else {
+   exts <- paste0("_", filt)
+ }
> 
> pdf(paste0("figures/dataset_characteristics/", dataset, exts, ".pdf"), width = 14, height = 9)
> 
> print(dataset)
[1] "GSE74596sim123"
> print(config_file)
[1] "config/GSE74596sim123.json"
> print(filt)
[1] ""
> print(cell_cycle_file)
[1] "data/cell_cycle_geneids.rds"
> 
> config <- fromJSON(file = config_file)
> mae <- readRDS(config$mae)
> groupid <- config$groupid
> mae <- clean_mae(mae = mae, groupid = groupid)
> 
> subsets <- readRDS(config$subfile)
> keep_samples <- subsets$keep_samples
> imposed_condition <- subsets$out_condition
> 
> cell_cycle_file <- readRDS(cell_cycle_file)
> if (!is.null(metadata(mae)$index)) {
+   cell_cycle_ids <- cell_cycle_file[[gsub("\\.cdna.*", "", metadata(mae)$index)]]
+ } else if (!is.null(metadata(mae)$organism)) {
+   cell_cycle_ids <- cell_cycle_file[[gsub(" ", "_", metadata(mae)$organism)]]
+ } else {
+   cell_cycle_ids <- NULL
+ }
> 
> sizes <- names(keep_samples)
> char_gene <- list()
> char_cells <- list()
> char_ds <- list()
> for (sz in sizes) {
+   for (i in 1:nrow(keep_samples[[as.character(sz)]])) {
+     message(sz, ".", i)
+     L <- subset_mae(mae, keep_samples, sz, i, imposed_condition, filt = filt)
+ 
+     ## Gene characteristics
+     chars <- calculate_gene_characteristics(L, do.plot = TRUE, 
+                                             title.ext = paste0(", ", sz, " cells per group, repl ", i))
+     df2 <- chars$characs
+     colnames(df2)[colnames(df2) != "gene"] <- paste0(colnames(df2)[colnames(df2) != "gene"],
+                                                      ".", sz, ".", i)
+     char_gene[[paste0(sz, ".", i)]] <- df2
+     
+     ## Cell characteristics
+     cellchars <- calculate_cell_characteristics(L)
+     df3 <- cellchars$characs
+     df3$condition <- L$condt[match(df3$cell, names(L$condt))]
+     colnames(df3)[colnames(df3) != "cell"] <- paste0(colnames(df3)[colnames(df3) != "cell"],
+                                                      ".", sz, ".", i)
+     char_cells[[paste0(sz, ".", i)]] <- df3
+     
+     char_ds[[paste0(sz, ".", i)]] <- c(n_genes = nrow(L$count))
+     
+     ## Plot expression of cell cycle genes
+     if (!is.null(cell_cycle_ids)) {
+       tpm_cell_cycle <- L$tpm[match(cell_cycle_ids, rownames(L$tpm)), ]
+       tpm_cell_cycle <- tpm_cell_cycle[!is.na(rownames(tpm_cell_cycle)), ]
+       tpm_cell_cycle_m <- reshape2::melt(tpm_cell_cycle)
+       tpm_cell_cycle_m$condition <- L$condt[match(tpm_cell_cycle_m$Var2, names(L$condt))]
+       tpm_cell_cycle_m$Var2 <- factor(tpm_cell_cycle_m$Var2, levels = names(sort(L$condt)))
+       nr <- nrow(tpm_cell_cycle)
+       vargroup <- data.frame(gene = unique(tpm_cell_cycle_m$Var1), group = rep(1:25, ceiling(nr/25))[1:nr])
+       tpm_cell_cycle_m$plot_group <- vargroup$group[match(tpm_cell_cycle_m$Var1, vargroup$gene)]
+       tpm_cell_cycle_m <- tpm_cell_cycle_m %>% dplyr::group_by(plot_group) %>% 
+         dplyr::mutate(plot_color = paste0("p", as.numeric(as.factor(Var1))))
+       print(ggplot(tpm_cell_cycle_m, aes(x = Var2, y = value + 1)) + 
+               geom_line(aes(group = Var1, color = plot_color)) + geom_point(aes(shape = condition)) + 
+               guides(color = FALSE) + scale_y_log10() + 
+               ggtitle(paste0("Cell cycle-associated genes, ", sz, " cells per group, repl ", i)) + 
+               scale_shape_discrete(name = "") + xlab("Cell") + ylab("TPM + 1") + 
+               facet_wrap(~plot_group, scales = "free_y") + theme_bw() + 
+               theme(legend.position = "bottom", 
+                     axis.text.x = element_blank()))
+     }
+   }
+ }
44.1

Execution halted
