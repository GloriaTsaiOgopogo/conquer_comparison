
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning message:
Setting LC_CTYPE failed, using "C" 
> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages(library(iCOBRA))
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(tidyr))
> suppressPackageStartupMessages(library(reshape2))
> 
> print(dataset)  ## Data set
[1] "GSE74596sim123"
> print(filt)  ## Filtering
[1] ""
> print(cobradir)  ## Directory where to look for cobra object (output from prepare_cobra_for_evaluation.R)
[1] "output/cobra_data"
> print(outdir) ## Directory where to save the calculated performances
[1] "output/performance_realtruth"
> 
> if (filt == "") {
+   exts <- filt
+ } else {
+   exts <- paste0("_", filt)
+ }
> 
> get_method <- function(x) sapply(strsplit(x, "\\."), .subset, 1)
> get_nsamples <- function(x) sapply(strsplit(x, "\\."), .subset, 2)
> get_repl <- function(x) sapply(strsplit(x, "\\."), .subset, 3)
> 
> ## --------------------------- Data preparation ----------------------------- ##
> cobra <- readRDS(paste0(cobradir, "/", dataset, exts, "_cobra.rds"))
> ## Set p-values and adjusted p-values for untested genes and genes with NA
> ## values to 1
> pval(cobra)[is.na(pval(cobra))] <- 1
> padj(cobra)[is.na(padj(cobra))] <- 1
> ## Similarly, set score for untested genes and genes with NA values to a value
> ## below the smallest observed score
> if (nrow(iCOBRA::score(cobra)) > 0) {
+   iCOBRA::score(cobra)[is.na(iCOBRA::score(cobra))] <- 
+     min(iCOBRA::score(cobra), na.rm = TRUE) - 1
+ }
> 
> truth <- readRDS(paste0("data/", dataset, "_truth.rds"))
> 
> cobra <- COBRAData(truth = truth, 
+                    object_to_extend = cobra)
214 new features and 3 new annotations added to truth table
> 
> ## --------------------- Performance calculation ---------------------------- ##
> ## Calculate performance separately for each data set instance, since the truth 
> ## is different. Use only genes that are actually tested as the basis for 
> ## evaluations (exclude the ones that are filtered out in advance).
> (szi <- unique(paste0(get_nsamples(colnames(padj(cobra))), ".", 
+                       get_repl(colnames(padj(cobra))))))
 [1] "44.1" "22.1" "22.2" "22.3" "22.4" "22.5" "12.1" "12.2" "12.3" "12.4"
[11] "12.5" "6.1"  "6.2"  "6.3"  "6.4"  "6.5" 
> cobraperf <- NULL
> for (s in szi) {
+   message(s)
+   ## Subset cobra object to given data set instance
+   cobratmp <- COBRAData(
+     padj = padj(cobra)[, grep(s, colnames(padj(cobra))), drop = FALSE],
+     score = iCOBRA::score(cobra)[, grep(s, colnames(iCOBRA::score(cobra))), drop = FALSE],
+     truth = truth(cobra)[, c("gene", "status", 
+                              grep(s, colnames(truth(cobra)), value = TRUE)), drop = FALSE])
+   
+   ## Keep only genes that are tested for this data set instance
+   truth(cobratmp) <- 
+     truth(cobratmp)[!is.na(truth(cobratmp)[, paste0("tested.", s)]), , drop = FALSE]
+   padj(cobratmp) <- 
+     padj(cobratmp)[rownames(padj(cobratmp)) %in% rownames(truth(cobratmp)), , drop = FALSE]
+   iCOBRA::score(cobratmp) <- 
+     iCOBRA::score(cobratmp)[rownames(iCOBRA::score(cobratmp)) %in% 
+                               rownames(truth(cobratmp)), , drop = FALSE]
+   
+   ## Calculate performance
+   cobraperftmp <- calculate_performance(cobratmp, binary_truth = "status", 
+                                         aspects = c("fdrtpr", "fdrtprcurve", "fpr", "tpr", "roc"), 
+                                         thrs = c(0.01, 0.05, 0.1))
+   if (is.null(cobraperf)) {
+     cobraperf <- cobraperftmp
+   } else {
+     fdrtpr(cobraperf) <- rbind(fdrtpr(cobraperf), fdrtpr(cobraperftmp))
+     fdrtprcurve(cobraperf) <- rbind(fdrtprcurve(cobraperf), fdrtprcurve(cobraperftmp))
+     fdrnbrcurve(cobraperf) <- rbind(fdrnbrcurve(cobraperf), fdrnbrcurve(cobraperftmp))
+     tpr(cobraperf) <- rbind(tpr(cobraperf), tpr(cobraperftmp))
+     fpr(cobraperf) <- rbind(fpr(cobraperf), fpr(cobraperftmp))
+     roc(cobraperf) <- rbind(roc(cobraperf), roc(cobraperftmp))
+   }
+ }
44.1
22.1
22.2
22.3
22.4
22.5
12.1
12.2
12.3
12.4
12.5
6.1
6.2
6.3
6.4
6.5
> 
> ## Calculate partial (cumulative) AUROCs
> roc(cobraperf) <- roc(cobraperf) %>% dplyr::group_by(method) %>% 
+   dplyr::mutate(FPR = c(0, FPR[-1])) %>%
+   dplyr::mutate(dFPR = c(0, diff(FPR)),
+                 dTPR = c(0, diff(TPR)),
+                 TPRs = c(0, TPR[-length(TPR)])) %>%
+   dplyr::mutate(AUC = cumsum(dFPR * dTPR/2 + dFPR * TPRs)) %>%
+   dplyr::ungroup() %>% as.data.frame()
> 
> saveRDS(cobraperf, file = paste0(outdir, "/", dataset, exts, "_performance.rds"))
> 
> sessionInfo()
R version 3.3.1 (2016-06-21)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

locale:
 [1] LC_CTYPE=C                 LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] reshape2_1.4.2 tidyr_0.6.1    dplyr_0.5.0    iCOBRA_1.2.0  

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.9          magrittr_1.5         munsell_0.4.3       
 [4] colorspace_1.3-2     xtable_1.8-2         R6_2.2.0            
 [7] stringr_1.1.0        ROCR_1.0-7           plyr_1.8.4          
[10] caTools_1.17.1       tools_3.3.1          shinydashboard_0.5.3
[13] DT_0.2               grid_3.3.1           gtable_0.2.0        
[16] KernSmooth_2.23-15   DBI_0.5-1            gtools_3.5.0        
[19] htmltools_0.3.5      lazyeval_0.2.0       assertthat_0.1      
[22] digest_0.6.12        tibble_1.2           gridExtra_2.2.1     
[25] shiny_1.0.0          ggplot2_2.2.1        bitops_1.0-6        
[28] htmlwidgets_0.8      mime_0.5             stringi_1.1.2       
[31] gdata_2.17.0         limma_3.30.13        UpSetR_1.3.2        
[34] shinyBS_0.61         gplots_3.0.1         scales_0.4.1        
[37] httpuv_1.3.3        
> 
> proc.time()
   user  system elapsed 
472.328   3.128 477.049 
