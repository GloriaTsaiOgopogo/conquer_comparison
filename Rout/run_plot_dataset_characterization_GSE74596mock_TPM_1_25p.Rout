
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning message:
Setting LC_CTYPE failed, using "C" 
> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages(library(pheatmap))
> suppressPackageStartupMessages(library(ggplot2))
Warning message:
package 'ggplot2' was built under R version 3.3.2 
> suppressPackageStartupMessages(library(ggrepel))
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(tidyr))
> suppressPackageStartupMessages(library(forcats))
> suppressPackageStartupMessages(library(iCOBRA))
> suppressPackageStartupMessages(library(reshape2))
> suppressPackageStartupMessages(library(rjson))
> suppressPackageStartupMessages(library(Biobase))
> suppressPackageStartupMessages(library(SummarizedExperiment))
> suppressPackageStartupMessages(library(MultiAssayExperiment))
> suppressPackageStartupMessages(library(UpSetR))
> suppressPackageStartupMessages(library(lazyeval))
> suppressPackageStartupMessages(library(monocle))
> source("/home/Shared/data/seq/conquer/comparison/scripts/prepare_mae.R")
> source("/home/Shared/data/seq/conquer/comparison/scripts/calculate_gene_characteristics.R")
> source("/home/Shared/data/seq/conquer/comparison/scripts/calculate_cell_characteristics.R")
> 
> if (filt == "") { 
+   exts <- filt
+ } else {
+   exts <- paste0("_", filt)
+ }
> 
> pdf(paste0("figures/dataset_characteristics/", dataset, exts, ".pdf"), width = 14, height = 9)
> 
> print(dataset)
[1] "GSE74596mock"
> print(config_file)
[1] "config/GSE74596mock.json"
> print(filt)
[1] "TPM_1_25p"
> print(cell_cycle_file)
[1] "data/cell_cycle_geneids.rds"
> 
> config <- fromJSON(file = config_file)
> mae <- readRDS(config$mae)
> groupid <- config$groupid
> mae <- clean_mae(mae = mae, groupid = groupid)
> 
> subsets <- readRDS(config$subfile)
> keep_samples <- subsets$keep_samples
> imposed_condition <- subsets$out_condition
> 
> cell_cycle_file <- readRDS(cell_cycle_file)
> if (!is.null(metadata(mae)$index)) {
+   cell_cycle_ids <- cell_cycle_file[[gsub("\\.cdna.*", "", metadata(mae)$index)]]
+ } else if (!is.null(metadata(mae)$organism)) {
+   cell_cycle_ids <- cell_cycle_file[[gsub(" ", "_", metadata(mae)$organism)]]
+ } else {
+   cell_cycle_ids <- NULL
+ }
> 
> sizes <- names(keep_samples)
> char_gene <- list()
> char_cells <- list()
> char_ds <- list()
> for (sz in sizes) {
+   for (i in 1:nrow(keep_samples[[as.character(sz)]])) {
+     message(sz, ".", i)
+     L <- subset_mae(mae, keep_samples, sz, i, imposed_condition, filt = filt)
+ 
+     ## Gene characteristics
+     chars <- calculate_gene_characteristics(L, do.plot = TRUE, 
+                                             title.ext = paste0(", ", sz, " cells per group, repl ", i))
+     df2 <- chars$characs
+     colnames(df2)[colnames(df2) != "gene"] <- paste0(colnames(df2)[colnames(df2) != "gene"],
+                                                      ".", sz, ".", i)
+     char_gene[[paste0(sz, ".", i)]] <- df2
+     
+     ## Cell characteristics
+     cellchars <- calculate_cell_characteristics(L)
+     df3 <- cellchars$characs
+     df3$condition <- L$condt[match(df3$cell, names(L$condt))]
+     colnames(df3)[colnames(df3) != "cell"] <- paste0(colnames(df3)[colnames(df3) != "cell"],
+                                                      ".", sz, ".", i)
+     char_cells[[paste0(sz, ".", i)]] <- df3
+     
+     char_ds[[paste0(sz, ".", i)]] <- c(n_genes = nrow(L$count))
+     
+     ## Plot expression of cell cycle genes
+     if (!is.null(cell_cycle_ids)) {
+       tpm_cell_cycle <- L$tpm[match(cell_cycle_ids, rownames(L$tpm)), ]
+       tpm_cell_cycle <- tpm_cell_cycle[!is.na(rownames(tpm_cell_cycle)), ]
+       tpm_cell_cycle_m <- reshape2::melt(tpm_cell_cycle)
+       tpm_cell_cycle_m$condition <- L$condt[match(tpm_cell_cycle_m$Var2, names(L$condt))]
+       tpm_cell_cycle_m$Var2 <- factor(tpm_cell_cycle_m$Var2, levels = names(sort(L$condt)))
+       nr <- nrow(tpm_cell_cycle)
+       vargroup <- data.frame(gene = unique(tpm_cell_cycle_m$Var1), group = rep(1:25, ceiling(nr/25))[1:nr])
+       tpm_cell_cycle_m$plot_group <- vargroup$group[match(tpm_cell_cycle_m$Var1, vargroup$gene)]
+       tpm_cell_cycle_m <- tpm_cell_cycle_m %>% dplyr::group_by(plot_group) %>% 
+         dplyr::mutate(plot_color = paste0("p", as.numeric(as.factor(Var1))))
+       print(ggplot(tpm_cell_cycle_m, aes(x = Var2, y = value + 1)) + 
+               geom_line(aes(group = Var1, color = plot_color)) + geom_point(aes(shape = condition)) + 
+               guides(color = FALSE) + scale_y_log10() + 
+               ggtitle(paste0("Cell cycle-associated genes, ", sz, " cells per group, repl ", i)) + 
+               scale_shape_discrete(name = "") + xlab("Cell") + ylab("TPM + 1") + 
+               facet_wrap(~plot_group, scales = "free_y") + theme_bw() + 
+               theme(legend.position = "bottom", 
+                     axis.text.x = element_blank()))
+     }
+   }
+ }
22.1
12.1
12.2
12.3
12.4
12.5
6.1
6.2
6.3
6.4
6.5
There were 44 warnings (use warnings() to see them)
> 
> char_ds_m <- data.frame(ds = names(char_ds), n_genes = sapply(char_ds, function(w) w["n_genes"]),
+                         stringsAsFactors = FALSE) %>%
+   tidyr::separate(ds, into = c("n_cells", "repl"), sep = "\\.", remove = FALSE) %>%
+   dplyr::mutate(n_cells = as.numeric(n_cells)) %>%
+   dplyr::mutate(repl = as.numeric(repl)) %>%
+   dplyr::arrange(n_cells, repl) %>%
+   dplyr::mutate(ds = factor(ds, levels = ds)) %>%
+   dplyr::mutate(n_cells = factor(n_cells, levels = unique(n_cells)))
> print(char_ds_m %>% ggplot(aes(x = ds, y = n_genes, fill = n_cells)) + geom_bar(stat = "identity") + 
+         theme_bw() + xlab("Data set") + ylab("Number of genes") + 
+         scale_fill_discrete(name = "Number of cells"))
> 
> char_gene <- Reduce(function(...) dplyr::full_join(..., by = "gene"), char_gene)
Warning messages:
1: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factors with different levels, coercing to character vector
2: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
3: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
4: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
5: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
6: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
7: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
8: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
9: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
10: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
> char_gene_m <- reshape2::melt(char_gene) %>% 
+   tidyr::separate(variable, into = c("mtype", "ncells", "repl"), sep = "\\.") %>%
+   dplyr::mutate(ncells = factor(paste0(ncells, " cells per group"), 
+                                 levels = paste0(as.character(sort(as.numeric(unique(ncells)))),
+                                                 " cells per group"))) 
Using gene, tested.22.1, tested.12.1, tested.12.2, tested.12.3, tested.12.4, tested.12.5, tested.6.1, tested.6.2, tested.6.3, tested.6.4, tested.6.5 as id variables
> 
> char_gene_s <- char_gene_m %>% tidyr::spread(key = mtype, value = value) %>%
+   dplyr::mutate(replicate = paste0(ncells, ", repl ", repl)) %>%
+   dplyr::arrange(ncells, as.numeric(repl))
> 
> char_cells <- Reduce(function(...) dplyr::full_join(..., by = "cell"), char_cells)
Warning messages:
1: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factors with different levels, coercing to character vector
2: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
3: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
4: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
5: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
6: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
7: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
8: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
9: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
10: In full_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) :
  joining factor and character vector, coercing into character vector
> char_cells_m <- reshape2::melt(char_cells[, !(colnames(char_cells) %in% 
+                                                 grep("condition", colnames(char_cells), value = TRUE))]) %>% 
+   tidyr::separate(variable, into = c("mtype", "ncells", "repl"), sep = "\\.") %>%
+   dplyr::mutate(ncells = factor(paste0(ncells, " cells per group"), 
+                                 levels = paste0(as.character(sort(as.numeric(unique(ncells)))),
+                                                 " cells per group")))
Using cell as id variables
> char_cells_cond <- reshape2::melt(char_cells[, colnames(char_cells) %in% 
+                                                c("cell", grep("condition", 
+                                                               colnames(char_cells), value = TRUE))],
+                                   id.vars = "cell") %>%
+   tidyr::separate(variable, into = c("mtype", "ncells", "repl"), sep = "\\.") %>%
+   dplyr::mutate(ncells = factor(paste0(ncells, " cells per group"), 
+                                 levels = paste0(as.character(sort(as.numeric(unique(ncells)))),
+                                                 " cells per group"))) %>%
+   dplyr::rename(condition = value) %>% dplyr::select(-mtype)
> char_cells_m <- dplyr::full_join(char_cells_m, char_cells_cond, by = c("cell", "ncells", "repl"))
>                                                 
> print(ggplot(char_gene_s, aes(x = avecount, y = fraczero)) + geom_point(size = 0.3) +
+         theme_bw() + scale_x_log10() + facet_wrap(~forcats::as_factor(replicate)) +
+         xlab("Average count per gene") + ylab("Fraction zeros per gene"))
Warning message:
Removed 24020 rows containing missing values (geom_point). 
> 
> for (tp in c("vartpm", "avecount", "avetpm", "avecensuscount")) {
+   nn <- switch(tp,
+                vartpm = "Variance of TPM values per gene",
+                avecount = "Average count per gene",
+                avecensuscount = "Average census count per gene",
+                avetpm = "Average TPM per gene")
+   print(char_gene_m %>% dplyr::filter(mtype == tp) %>% 
+           ggplot(aes(x = value, group = repl, col = repl)) +
+           scale_color_discrete(guide = FALSE) + 
+           geom_density() + scale_x_log10() + facet_wrap(~ncells) + 
+           theme_bw() + xlab(nn))
+ }
Warning messages:
1: Removed 24020 rows containing non-finite values (stat_density). 
2: Removed 24020 rows containing non-finite values (stat_density). 
3: Removed 24020 rows containing non-finite values (stat_density). 
4: Removed 24020 rows containing non-finite values (stat_density). 
> for (tp in c("fraczero", "fraczerodiff", "fraczerocensus", "cvtpm")) {
+   nn <- switch(tp, 
+                fraczero = "Fraction zeros per gene",
+                fraczerodiff = "Difference (between conditions) of zero fraction per gene",
+                cvtpm = "Coefficient of variation (TPM)",
+                fraczerocensus = "Fraction zeros per gene, census counts")
+   print(char_gene_m %>% dplyr::filter(mtype == tp) %>% 
+           ggplot(aes(x = value, group = repl, col = repl)) +
+           scale_color_discrete(guide = FALSE) + 
+           geom_density() + facet_wrap(~ncells) + 
+           theme_bw() + xlab(nn))
+ }
Warning messages:
1: Removed 24020 rows containing non-finite values (stat_density). 
2: Removed 24020 rows containing non-finite values (stat_density). 
3: Removed 24020 rows containing non-finite values (stat_density). 
4: Removed 24020 rows containing non-finite values (stat_density). 
> for (tp in c("libsize", "fraczero", "libsizecensus", "fraczerocensus")) {
+   nn <- switch(tp,
+                fraczero = "Fraction zeros per cell",
+                libsize = "Library size per cell",
+                libsizecensus = "Library size per cell, census counts",
+                fraczerocensus = "Fraction zeros per cell, census counts")
+   print(char_cells_m %>% dplyr::filter(mtype == tp) %>% 
+           ggplot(aes(x = value, group = repl, col = repl)) +
+           scale_color_discrete(guide = FALSE) + 
+           geom_density() + facet_wrap(~ncells) + 
+           theme_bw() + xlab(nn))
+   print(char_cells_m %>% dplyr::filter(mtype == tp) %>%
+           dplyr::filter(!is.na(value)) %>%
+           ggplot(aes(x = condition, y = value)) + geom_boxplot(outlier.size = -1) +
+           geom_point(position = position_jitter(width = 0.2)) + 
+           theme_bw() + xlab("") + ylab(nn) + 
+           theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) + 
+           facet_wrap(~interaction(ncells, repl)))
+   print(char_cells_m %>% dplyr::filter(mtype == tp) %>%
+           dplyr::filter(!is.na(value)) %>%
+           ggplot(aes(x = cell, y = value, fill = condition)) + geom_bar(stat = "identity") +
+           theme_bw() + xlab("Cell") + ylab(nn) + 
+           theme(axis.text.x = element_blank(),
+                 legend.position = "bottom") + 
+           facet_wrap(~interaction(ncells, repl)))
+ }
Warning messages:
1: Removed 260 rows containing non-finite values (stat_density). 
2: Removed 260 rows containing non-finite values (stat_density). 
3: Removed 260 rows containing non-finite values (stat_density). 
4: Removed 260 rows containing non-finite values (stat_density). 
> 
> dev.off()
null device 
          1 
> 
> saveRDS(lapply(list(char_cells_m = char_cells_m, 
+                     char_gene_m = char_gene_m,
+                     char_ds_m = char_ds_m),
+                function(L) {
+                  L$dataset <- dataset
+                  L$filt <- filt
+                  L
+                }), 
+         paste0("figures/dataset_characteristics/", dataset, exts, ".rds"))
> 
> sessionInfo()
R version 3.3.1 (2016-06-21)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

locale:
 [1] LC_CTYPE=C                 LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
 [1] splines   stats4    parallel  stats     graphics  grDevices utils    
 [8] datasets  methods   base     

other attached packages:
 [1] monocle_2.2.0              DDRTree_0.1.4             
 [3] irlba_2.1.2                VGAM_1.0-3                
 [5] Matrix_1.2-8               lazyeval_0.2.0            
 [7] UpSetR_1.3.2               MultiAssayExperiment_1.0.0
 [9] SummarizedExperiment_1.4.0 GenomicRanges_1.26.2      
[11] GenomeInfoDb_1.10.3        IRanges_2.8.1             
[13] S4Vectors_0.12.1           Biobase_2.34.0            
[15] BiocGenerics_0.20.0        rjson_0.2.15              
[17] reshape2_1.4.2             iCOBRA_1.2.0              
[19] forcats_0.2.0              tidyr_0.6.1               
[21] dplyr_0.5.0                ggrepel_0.6.5             
[23] ggplot2_2.2.1              pheatmap_1.0.8            

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.9            lattice_0.20-34        gtools_3.5.0          
 [4] assertthat_0.1         digest_0.6.12          mime_0.5              
 [7] slam_0.1-38            R6_2.2.0               plyr_1.8.4            
[10] qlcMatrix_0.9.5        gplots_3.0.1           zlibbioc_1.20.0       
[13] gdata_2.17.0           combinat_0.0-8         DT_0.2                
[16] labeling_0.3           stringr_1.1.0          htmlwidgets_0.8       
[19] igraph_1.0.1           RCurl_1.95-4.8         munsell_0.4.3         
[22] shiny_1.0.0            httpuv_1.3.3           htmltools_0.3.5       
[25] tibble_1.2             gridExtra_2.2.1        matrixStats_0.51.0    
[28] shinyBS_0.61           bitops_1.0-6           grid_3.3.1            
[31] xtable_1.8-2           gtable_0.2.0           DBI_0.5-1             
[34] magrittr_1.5           scales_0.4.1           KernSmooth_2.23-15    
[37] stringi_1.1.2          XVector_0.14.0         ROCR_1.0-7            
[40] limma_3.30.8           fastICA_1.2-0          RColorBrewer_1.1-2    
[43] tools_3.3.1            HSMMSingleCell_0.108.0 colorspace_1.3-2      
[46] cluster_2.0.5          caTools_1.17.1         shinydashboard_0.5.3  
> 
> proc.time()
   user  system elapsed 
139.393   3.996 143.649 
