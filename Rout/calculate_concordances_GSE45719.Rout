
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning message:
Setting LC_CTYPE failed, using "C" 
> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages(library(iCOBRA))
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(tidyr))
> suppressPackageStartupMessages(library(caTools))
> 
> print(dataset)  ## Data set
[1] "GSE45719"
> print(filt)  ## Filtering
[1] ""
> print(cobradir)  ## Directory where to look for cobra object (output from prepare_cobra_for_evaluation.R)
[1] "output/cobra_data"
> print(outdir) ## Directory where to save the calculated concordances
[1] "output/concordances"
> 
> if (filt == "") {
+   exts <- filt
+ } else {
+   exts <- paste0("_", filt)
+ }
> 
> ## Function to calculate concordance for a matrix mtx. Considering the top
> ## maxrank variables, returning the number of hits shared by all columns of mtx
> calculate_concordance <- function(mtx, maxrank) {
+   if (ncol(mtx) > 1) {
+     data.frame(t(sapply(1:maxrank, function(i) {
+       p <- sort(mtx[1:i, ])
+       p <- p[duplicated(p)]
+       p <- sum(table(p) + 1 == ncol(mtx))
+       c(k = i, p = p, frac = 1)
+     })), stringsAsFactors = FALSE)
+   } else {
+     NULL
+   }
+ }
> 
> ## Slower version of concordance calculation, which allows to find genes shared 
> ## between at least a certain fraction of the columns. Note, however, that it is
> ## more difficult to interpret the results if frac != 1, since the concordance
> ## value can be larger than maxrank
> calculate_concordance_slow <- function(mtx, maxrank, frac) {
+   if (ncol(mtx) > 1) {
+     data.frame(t(sapply(1:maxrank, function(i) {
+       p <- sum(table(unlist(mtx[1:i, ])) >= frac * ncol(mtx))
+       c(k = i, p = p, frac = frac)
+     })), stringsAsFactors = FALSE)
+   } else {
+     NULL
+   }
+ }
> 
> ## For each k in 1:maxrank, count the number of genes occurring each number of
> ## times. The output is a data frame with three columns: nbr_occ, nbr_genes, k.
> ## For a given row, interpret as follows: among the top-k genes from each
> ## method, nbr_genes occur exactly nbr_occ times. To get the total number of
> ## methods (columns) of the matrix, do:
> ## out %>% dplyr::group_by(k) %>% dplyr::summarize(nbr_col = sum(nbr_occ * nbr_genes)) %>% dplyr::ungroup() %>% dplyr::mutate(nbr_col = nbr_col/k). 
> ## All values of nbr_col in the resulting matrix should be the same. The total
> ## number of distinct genes among the top-k across all the columns is obtained
> ## by summing the values in the nbr_genes column for a given value of k
> calculate_nbr_occurrences <- function(mtx, maxrank) {
+   if (ncol(mtx) > 1) {
+     do.call(rbind, lapply(1:maxrank, function(i) {
+       tbl <- table(unlist(mtx[1:i, ]))
+       data.frame(table(tbl)) %>% dplyr::mutate(k = i) %>%
+         dplyr::rename(nbr_occ = tbl) %>%
+         dplyr::rename(nbr_genes = Freq) %>%
+         dplyr::mutate(nbr_occ = as.numeric(as.character(nbr_occ))) %>%
+         dplyr::full_join(data.frame(k = i, nbr_occ = 1:ncol(mtx)))
+     })) %>% dplyr::arrange(k, nbr_occ) %>%
+       dplyr::mutate(nbr_genes = replace(nbr_genes, is.na(nbr_genes), 0))
+   } else {
+     NULL
+   }
+ }
> 
> get_method <- function(x) sapply(strsplit(x, "\\."), .subset, 1)
> get_nsamples <- function(x) sapply(strsplit(x, "\\."), .subset, 2)
> get_repl <- function(x) sapply(strsplit(x, "\\."), .subset, 3)
> 
> cobra <- readRDS(paste0(cobradir, "/", dataset, exts, "_cobra.rds"))
> ## Set p-values and adjusted p-values for untested genes and genes with NA
> ## values to 1
> pval(cobra)[is.na(pval(cobra))] <- 1
> padj(cobra)[is.na(padj(cobra))] <- 1
> ## Similarly, set score for untested genes and genes with NA values to a value 
> ## below the smallest observed score and change the sign so that the smallest
> ## (most negative) score corresponds to the most significant gene
> if (nrow(iCOBRA::score(cobra)) > 0) {
+   iCOBRA::score(cobra)[is.na(iCOBRA::score(cobra))] <- min(iCOBRA::score(cobra), na.rm = TRUE) - 1
+   iCOBRA::score(cobra) <- -iCOBRA::score(cobra)
+ }
> 
> summary_data <- list()
> 
> ## -------------------------- Concordance plots --------------------------- ##
> maxrank <- 1000
> 
> pconc <- pval(cobra)
> ## For methods not returning p-values, use scores or adjusted p-values
> addm <- setdiff(colnames(iCOBRA::score(cobra)), colnames(pconc))
> if (length(addm) > 0) {
+   pconc <- dplyr::full_join(data.frame(gene = rownames(pconc), pconc),
+                             data.frame(gene = rownames(iCOBRA::score(cobra)), iCOBRA::score(cobra)[, addm]))
+   rownames(pconc) <- pconc$gene
+   pconc$gene <- NULL
+ }
Joining, by = "gene"
> addm <- setdiff(colnames(padj(cobra)), colnames(pconc))
> if (length(addm) > 0) {
+   pconc <- dplyr::full_join(data.frame(gene = rownames(pconc), pconc),
+                             data.frame(gene = rownames(padj(cobra)), padj(cobra)[, addm]))
+   rownames(pconc) <- pconc$gene
+   pconc$gene <- NULL
+ }
Joining, by = "gene"
> ## Find ordering of each column
> for (i in colnames(pconc)) {
+   pconc[, i] <- order(pconc[, i])
+ }
> pconc <- as.matrix(pconc)
> 
> all_methods <- unique(get_method(colnames(pconc)))
> all_nsamples <- unique(get_nsamples(colnames(pconc)))
> all_repl <- unique(get_repl(colnames(pconc)))
> 
> ## Across all instances (all sample sizes, all replicates), for the same method
> concvals <- do.call(rbind, lapply(all_methods, function(mth) {
+   concval <- calculate_concordance(mtx = pconc[, which(get_method(colnames(pconc)) == mth)], 
+                                    maxrank = maxrank)
+   concval$method <- mth
+   concval
+ }))
> summary_data$concordance_fullds <- 
+   rbind(summary_data$concordance_fullds, 
+         concvals %>% dplyr::mutate(dataset = dataset, filt = filt))
> 
> conc_auc <- concvals %>% dplyr::group_by(method) %>% 
+   dplyr::summarize(auc = caTools::trapz(c(0, k, k[length(k)]), c(0, p, 0))/(maxrank^2/2)) %>%
+   dplyr::mutate(frac = 1)
> summary_data$concordance_fullds_auc <- 
+   rbind(summary_data$concordance_fullds_auc, 
+         conc_auc %>% dplyr::mutate(dataset = dataset, filt = filt))
> 
> ## Across all instances with a given sample size, for the same method
> concvals_ss <- do.call(rbind, lapply(all_methods, function(mth) {
+   do.call(rbind, lapply(all_nsamples, function(i) {
+     concval <- 
+       calculate_concordance(mtx = pconc[, intersect(which(get_method(colnames(pconc)) == mth),
+                                                     which(get_nsamples(colnames(pconc)) == i)), 
+                                         drop = FALSE],
+                             maxrank = maxrank)
+     if (!is.null(concval)) {
+       concval$method <- mth
+       concval$ncells <- i
+       concval
+     } else {
+       NULL
+     }
+   }))
+ }))
> concvals_ss$ncells <- factor(concvals_ss$ncells,
+                              levels = sort(unique(as.numeric(as.character(concvals_ss$ncells)))))
> summary_data$concordance_byncells <- 
+   rbind(summary_data$concordance_byncells, 
+         concvals_ss %>% dplyr::mutate(dataset = dataset, filt = filt))
> 
> conc_auc_ss <- concvals_ss %>% dplyr::group_by(method, ncells) %>% 
+   dplyr::summarize(auc = caTools::trapz(c(0, k, k[length(k)]), c(0, p, 0))/(maxrank^2/2)) %>%
+   dplyr::mutate(frac = 1)
> summary_data$concordance_byncells_auc <- 
+   rbind(summary_data$concordance_byncells_auc, 
+         conc_auc_ss %>% dplyr::mutate(dataset = dataset, filt = filt))
> 
> ## Between pairwise instances with a given sample size, for the same method
> concvals_pairwise <- do.call(rbind, lapply(all_methods, function(mth) {
+   do.call(rbind, lapply(all_nsamples, function(i) {
+     tmp <- pconc[, intersect(which(get_method(colnames(pconc)) == mth),
+                              which(get_nsamples(colnames(pconc)) == i)), drop = FALSE]
+     if (ncol(tmp) > 1) {
+       concval <- NULL
+       for (j1 in 1:(ncol(tmp) - 1)) {
+         for (j2 in (j1 + 1):(ncol(tmp))) {
+           cv <- calculate_concordance(mtx = tmp[, c(j1, j2)], maxrank = maxrank)
+           cv$ncells1 <- i
+           cv$ncells2 <- i
+           cv$replicate1 <- get_repl(colnames(tmp)[j1])
+           cv$replicate2 <- get_repl(colnames(tmp)[j2])
+           concval <- rbind(concval, cv)
+         }
+       }
+       concval$method <- mth
+       concval
+     } else {
+       NULL
+     }
+   }))
+ }))
> summary_data$concordance_pairwise <- 
+   rbind(summary_data$concordance_pairwise, 
+         concvals_pairwise %>% dplyr::mutate(dataset = dataset, filt = filt))
> 
> conc_auc_pw <- concvals_pairwise %>% 
+   dplyr::group_by(method, ncells1, ncells2, replicate1, replicate2) %>% 
+   dplyr::summarize(auc = caTools::trapz(c(0, k, k[length(k)]), c(0, p, 0))/(maxrank^2/2)) %>%
+   dplyr::mutate(frac = 1)
> summary_data$concordance_pairwise_auc <- 
+   rbind(summary_data$concordance_pairwise_auc, 
+         conc_auc_pw %>% dplyr::mutate(dataset = dataset, filt = filt))
> 
> ## Between pairs of methods, for a given data set instance (fixed sample size, replicate)
> concvals_btwmth <- do.call(rbind, lapply(all_nsamples, function(ss) {
+   do.call(rbind, lapply(all_repl, function(i) {
+     tmp <- pconc[, intersect(which(get_repl(colnames(pconc)) == i),
+                              which(get_nsamples(colnames(pconc)) == ss)), drop = FALSE]
+     if (ncol(tmp) > 1) {
+       concval <- NULL
+       for (j1 in 1:(ncol(tmp) - 1)) {
+         for (j2 in (j1 + 1):(ncol(tmp))) {
+           cv <- calculate_concordance(mtx = tmp[, c(j1, j2)], maxrank = maxrank)
+           cv$method1 <- get_method(colnames(tmp)[j1])
+           cv$method2 <- get_method(colnames(tmp)[j2])
+           concval <- rbind(concval, cv)
+         }
+       }
+       concval$ncells <- ss
+       concval$repl <- i
+       concval
+     } else {
+       NULL
+     }
+   }))
+ }))
