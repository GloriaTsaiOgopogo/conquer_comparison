
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning message:
Setting LC_CTYPE failed, using "C" 
> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(tidyr))
> suppressPackageStartupMessages(library(ggplot2))
> suppressPackageStartupMessages(library(reshape2))
> suppressPackageStartupMessages(library(pheatmap))
> suppressPackageStartupMessages(library(ggrepel))
> suppressPackageStartupMessages(library(ggbiplot))
> 
> datasets <- strsplit(datasets, ",")[[1]]
> names(datasets) <- datasets
> 
> print(datasets)
           GSE74596mock            GSE45719mock           EMTAB2805mock 
         "GSE74596mock"          "GSE45719mock"         "EMTAB2805mock" 
  GSE60749-GPL13112mock   GSE48968-GPL13112mock 
"GSE60749-GPL13112mock" "GSE48968-GPL13112mock" 
> print(filt)
[1] ""
> 
> cols <- c("#488d00", "#6400a6", "#8bff58", "#ff5cd5", "#9CC0AD",
+           "#ab0022", "#a3c6ff", "#e6a900", "#a996ff", "#401600",
+           "#ff6d9b", "#017671", "cyan", "red", "blue", "orange",
+           "#B17BA6", "#7BAFDE", "#F6C141", "#90C987")
> if (filt == "") { 
+   exts <- filt
+ } else {
+   exts <- paste0("_", filt)
+ }
> names(cols) <- paste0(c("edgeRLRT", "zingeR", "SAMseq", "edgeRQLF", "NODES",
+                         "DESeq2", "edgeRLRTdeconv", "SCDE", "monocle", "edgeRLRTrobust", 
+                         "voomlimma", "Wilcoxon", "BPSC", "MASTcounts", "MASTcountsDetRate", 
+                         "MASTtpm", "zingeRauto", "Seurat", "DESeq2census", "edgeRLRTcensus"), exts)
> 
> 
> summary_data_list <- lapply(datasets, function(ds) {
+   readRDS(paste0("figures/summary_data/", ds, exts, "_summary_data.rds"))
+ })
> 
> pdf(paste0("figures/summary_crossds/summary_pca", exts, ".pdf"), width = 10, height = 7)
> 
> ## PCA of significant gene characteristics
> lapply(c(list(datasets), as.list(datasets)), function(ds) {
+   for (stat in c("tstat", "mediandiff")) {
+     x <- lapply(summary_data_list[ds], function(m) {
+       m$stats_charac %>% dplyr::filter_(paste0("!is.na(", stat, ")")) %>% 
+         dplyr::mutate(Var2 = paste0(Var2, ".", dataset, ".", filt)) %>%
+         dplyr::select_("Var2", stat, "charac")  %>%
+         dplyr::filter(charac != "fraczerodiff")
+     })
+     x <- do.call(rbind, x) %>% dcast(charac ~ Var2, value.var = stat)
+     rownames(x) <- x$charac
+     x$charac <- NULL
+     
+     for (scl in c(TRUE, FALSE)) {
+       pca <- prcomp(t(x), scale. = scl)
+       annot <- data.frame(id = colnames(x), stringsAsFactors = FALSE) %>%
+         tidyr::separate(id, into = c("method", "n_samples", "repl", "dataset", "filt"), 
+                         sep = "\\.", remove = FALSE)
+       print(ggplot(merge(annot, pca$x[, 1:2], by.x = "id", by.y = 0, all = TRUE), 
+                    aes(x = PC1, y = PC2, color = method, shape = dataset)) +
+               geom_point(size = 3) + theme_bw() + 
+               scale_color_manual(values = cols) + 
+               ggtitle(paste0(stat, ".scale=", scl)) + 
+               guides(color = guide_legend(ncol = 2, title = ""),
+                      shape = guide_legend(ncol = 2, title = "")))
+       print(ggplot(merge(annot, pca$x[, 1:2], by.x = "id", by.y = 0, all = TRUE) %>%
+                      dplyr::group_by(method, dataset) %>% 
+                      dplyr::summarize(PC1 = mean(PC1), PC2 = mean(PC2)), 
+                    aes(x = PC1, y = PC2, color = method, shape = dataset)) +
+               geom_point(size = 4) + theme_bw() + 
+               scale_color_manual(values = cols) + 
+               ggtitle(paste0(stat, ".scale=", scl)) + 
+               guides(color = guide_legend(ncol = 2, title = ""),
+                      shape = guide_legend(ncol = 2, title = "")))
+       print(ggplot(data.frame(id = rownames(pca$rotation), pca$rotation[, 1:2]), 
+                    aes(x = PC1, y = PC2, label = id)) + geom_point() + geom_text_repel() +
+               geom_segment(aes(x = 0, y = 0, xend = PC1, yend = PC2), 
+                            arrow = arrow(length = unit(0.03, "npc")), linetype = "dashed") + 
+               theme_bw() + 
+               ggtitle(paste0(stat, ".scale=", scl)))
+       print(ggbiplot(pca, scale = 0, groups = annot$method, ellipse = TRUE,
+                      ellipse.prob = 0.68, alpha = 0, var.axes = TRUE) + 
+               theme_bw() + scale_color_manual(values = cols) + 
+               ggtitle(paste0(stat, ".scale=", scl)) + 
+               geom_point(data = merge(annot, pca$x[, 1:2], by.x = "id", by.y = 0, all = TRUE) %>%
+                            dplyr::group_by(method) %>% 
+                            dplyr::summarize(PC1 = mean(PC1), PC2 = mean(PC2)),
+                          aes(x = PC1, y = PC2, col = method)) + 
+               guides(color = guide_legend(ncol = 2, title = ""),
+                      shape = guide_legend(ncol = 2, title = "")) + 
+               coord_equal(ratio = diff(range(pca$x[, 1]))/diff(range(pca$x[, 2]))))
+       plot(pca, main = "")
+     }
+   }
+ })
[[1]]
NULL

$GSE74596mock
NULL

$GSE45719mock
NULL

$EMTAB2805mock
NULL

$`GSE60749-GPL13112mock`
NULL

$`GSE48968-GPL13112mock`
NULL

> dev.off()
null device 
          1 
> 
> pdf(paste0("figures/summary_crossds/summary_heatmaps", exts, ".pdf"),
+     width = 10, height = 4 * length(datasets))
> 
> ## Heatmap of true FPRs (fraction of nominal p-values below 0.05)
> y <- lapply(summary_data_list, function(m) {
+   m$fracpbelow0.05 %>% 
+     tidyr::separate(method, c("method", "n_samples", "repl"), sep = "\\.") %>%
+     #dplyr::arrange(as.numeric(as.character(n_samples))) %>%
+     dplyr::mutate(dataset = paste0(dataset, ".", filt, ".", n_samples, ".", repl)) %>%
+     dplyr::select(method, dataset, FPR)
+ })
> y <- do.call(rbind, y) %>% dcast(dataset ~ method, value.var = "FPR") %>%
+   tidyr::separate(dataset, c("ds", "filt", "n_samples", "repl"), sep = "\\.", remove = FALSE) %>%
+   dplyr::arrange(ds, as.numeric(as.character(n_samples))) %>% 
+   dplyr::select(-ds, -filt, -n_samples, -repl)  %>% as.data.frame()
> rownames(y) <- y$dataset
> y$dataset <- NULL
> 
> annotation_row = data.frame(id = rownames(y)) %>% 
+   tidyr::separate(id, c("dataset", "filt", "n_samples", "repl"), sep = "\\.", remove = FALSE) %>%
+   dplyr::mutate(n_samples = factor(n_samples, 
+                                    levels = as.character(sort(unique(as.numeric(as.character(n_samples)))))))
> rownames(annotation_row) <- annotation_row$id
> 
> pheatmap(y, cluster_rows = FALSE, cluster_cols = FALSE, scale = "none", main = "True FPR",
+          display_numbers = TRUE, 
+          annotation_row = dplyr::select(annotation_row, n_samples, dataset), show_rownames = FALSE,
+          annotation_col = data.frame(method = colnames(y), row.names = colnames(y)),
+          annotation_colors = list(method = structure(cols, names = names(cols))[colnames(y)]),
+          annotation_names_col = FALSE)
> dev.off()
null device 
          1 
> 
> ## Timing
> pdf(paste0("figures/summary_crossds/relative_timing", exts, ".pdf"), width = 10, height = 7)
> 
> y <- lapply(summary_data_list, function(m) {
+   if (!is.null(m$timing)) {
+     m$timing %>% group_by(dataset, filt, nsamples) %>%
+       dplyr::mutate(timing = timing/max(timing))
+   } else {
+     NULL
+   }
+ })
> y <- do.call(rbind, y)
> ## Boxplots
> print(ggplot(y, aes(x = method, y = timing, color = method)) + geom_boxplot(outlier.size = 0) + 
+         geom_point(position = position_jitter(width = 0.2)) + 
+         theme_bw() + xlab("") + ylab("Relative timing") + 
+         scale_color_manual(values = cols, name = "") + 
+         theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)))
> 
> print(ggplot(y, aes(x = method, y = timing, color = method)) + geom_boxplot(outlier.size = 0) + 
+         geom_point(position = position_jitter(width = 0.2)) + 
+         theme_bw() + xlab("") + ylab("Relative timing") + 
+         scale_color_manual(values = cols, name = "") + scale_y_log10() +
+         theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)))
> 
> ## Barplots
> y %>% group_by(method) %>% dplyr::summarize(mean = mean(timing), sd = sd(timing)) %>%
+   ggplot(aes(x = method, y = mean, fill = method)) + 
+   geom_errorbar(aes(ymin = min(mean)/2, ymax = mean + sd), width = 0.2) + 
+   geom_bar(stat = "identity") + 
+   theme_bw() + xlab("") + ylab("Relative timing") + 
+   scale_fill_manual(values = cols, name = "") + 
+   theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
> 
> ## Dependence on number of samples
> y2 <- lapply(summary_data_list, function(m) {
+   if (!is.null(m$timing)) {
+     m$timing
+   } else {
+     NULL
+   }
+ })
> y2 <- do.call(rbind, y2)
> print(y2 %>% group_by(method, dataset, filt) %>%
+         arrange(nsamples) %>% 
+         dplyr::mutate(dt = c(0, diff(timing)),
+                       t = c(0, timing[1:(length(timing) - 1)]),
+                       ds = c(0, diff(nsamples)),
+                       s = c(0, nsamples[1:(length(nsamples) - 1)])) %>% 
+         dplyr::mutate(reltime = (dt/t)/(ds/s)) %>%
+         filter(!is.na(reltime)) %>%
+         ggplot(aes(x = method, y = reltime, color = method)) + geom_boxplot(outlier.size = 0) + 
+         geom_point(position = position_jitter(width = 0.2)) + 
+         theme_bw() + xlab("") + ylab("Relative change in time per relative increase in number of cells") + 
+         scale_color_manual(values = cols, name = "") + 
+         theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)))
> 
> dev.off()
null device 
          1 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
 43.130   0.657  43.967 
